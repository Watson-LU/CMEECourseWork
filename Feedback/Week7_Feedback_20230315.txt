Starting code feedback for Jintao, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 4.48 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, MiniProject, week7, week3, week2, Feedback, week1

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp
*.log

## PYTHON TEMPLATE
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

## R TEMPLATE
# History files
.Rhistory
.Rapp.history

# Session Data files
.RData
.RDataTmp

# User-specific files
.Ruserdata

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md

# R Environment Variables
.Renviron

# pkgdown site
docs/

# translation temp files
po/*~

# RStudio Connect folder
rsconnect/

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
#My CMEE Coursework Repository

## Files in the CMEECourseWork
1. the feedback folder 
2. the README.md file
3. week1 folder
4. week2 folder
5. week3 folder
6. week4 folder --practices in the Data Management and Visualization module
7. week7 folder
8. Miniproject folder
...
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: week1, week2, week3, week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: code, sandbox, results, data

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Project name: Week7 python2 practice 
## Brief Description
It's for the week7 python2 practices 

There are total Three practices in this section.

The first one is to create the LV model figure with a new consumer VS resource graph together in one pdf file.

The second task is firstly write the model of adjusted by recource population. then run a py file to compare lv1 model and lv2 model's operating time.

The third assignment is to apply Rscript into python environment.

## Languages
Generally use bash and python3 that work in the both terminal and VSC.


## Dependencies and installation
Under this paractice, more modules are required in python.
1. the module numpy.
```python
import numpy as np
```
2. the module integrate
```python
import scipy.integrate as integrate
```
3. the module matplotlib
```python
import matplotlib.pylab as p
```
4. the module PdfPages
```python
from matplotlib.backends.backend_pdf import PdfPages
```
5. the module sys
```python
import sys
```
6. the module subprocess
```python
import subprocess
```

## Project stucture and Usage

1. In the first practice, the orignal LV model is set as :
```python
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
```
then, the two figure is drawn and set into one pdf file:
```python
f1 = p.figure()
f2 = p.figure()
pp = PdfPages("../results/lv1.pdf")
pp.savefig(f1)
pp.savefig(f2)
```

2. In this practice, adjusted LV model is definded as below:
```python
def dCR_dt(pops, t=0):
    """ the adjusted LV model with resource population"""
    R = pops[0]
    C = pops[1]
    dRdt = r * R*(1-R/K) - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return np.array([dRdt, dCdt]) 
```
the parameter was set by the arguments outside the script:
```python
r = float(sys.argv[1])
a = float(sys.argv[2])
z = float(sys.argv[3])
e = float(sys.argv[4])
```

3. In the last practice, the goal is to runing R script in the python envoronment by applying subprocess module.
```python
import subprocess
p = subprocess.Popen(["Rscript", "fmr.R"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = p.communicate()
print(stdout.decode())
```


Finished

## Author name and Contact
Author name: Jintao Lu

Contact: jl8722@ic.ac.uk

**********************************************************************

Found following files in results directory: errorFile.Rout, fmr_errFile.Rout, fmr.Rout, Test_errFile.Rout, lv1.pdf, outputFile.Rout, fmr_plot.pdf, Test.Rout, lv2.pdf...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 95.5

Found 10 code files: TestR.py, runlv1and2.py, LV1.py, LV2.py, Test.R, profileme2.py, fmr.R, run_fmr_R.py, profileme.py, timeitme.py

Found the following extra files: = 1000000
0.5 pt deducted per extra file

Current Points = 95.0

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:

**********************************************************************

import subprocess
P = subprocess.Popen("Rscript --verbose Test.R > ../results/Test.Rout 2> ../results/Test_errFile.Rout", shell = True).wait()


























**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.20633s

======================================================================
Inspecting script file runlv1and2.py...

File contents are:

**********************************************************************
""" this code run compare two LV model and test their running times"""
import numpy as np
import scipy.integrate as integrate

def dCR_dt1(pops1, t=0):
    """ normal LV model """
    R = pops1[0]
    C = pops1[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return np.array([dRdt, dCdt])


def dCR_dt2(pops2, t=0):
    """ LV model with recource population"""
    R = pops2[0]
    C = pops2[1]
    dRdt = r * R*(1-R/K) - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return np.array([dRdt, dCdt])

""" setted constant parameters"""
r = 1
a = 0.1
z = 1.5
e = 0.75
K= 100

""" time steps"""
t = np.linspace(0,300, 1000)

R0 = 10
C0 = 5 
RC0 = np.array([R0, C0])

""" ode functions setted"""
pops1, infodict = integrate.odeint(dCR_dt1, RC0, t, full_output=True)
pops2, infodict = integrate.odeint(dCR_dt2, RC0, t, full_output=True)

pops1
pops2

""" use command to test the running time and compare those two models"""
%timeit (dCR_dt1(pops1,t=0))
%timeit (dCR_dt2(pops2,t=0))


#the LV1 is less time consume than LV2 since LV2 calculate more complex

#two methods to spped up the time
# one is pre-allocate the list, or change the list with setted arrays.
# another one is setting the appropriate time and time steps to find the less time consume.


























**********************************************************************

Testing runlv1and2.py...

runlv1and2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/JintaoLU_/week7/code/runlv1and2.py", line 46
    %timeit (dCR_dt1(pops1,t=0))
    ^
SyntaxError: invalid syntax

======================================================================
Inspecting script file LV1.py...

File contents are:

**********************************************************************
""" this work is for checking the relationship between
    Resource density with consumer"""
import numpy as np
import scipy.integrate as integrate
import matplotlib.pylab as p
from matplotlib.backends.backend_pdf import PdfPages


def dCR_dt(pops, t=0):
    """ the function that defined LV model"""
    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return np.array([dRdt, dCdt])

""" the constant parameters that given here"""
r = 1.
a = 0.1 
z = 1.5
e = 0.75

""" time steps"""
t = np.linspace(0, 15, 1000)

""" initial setting values"""
R0 = 10
C0 = 5 
RC0 = np.array([R0, C0])

""" to operate with the ode function and store results into dictionaries"""
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
pops

""" to create the original figure """
f1 = p.figure()
p.plot(t, pops[:,0], 'g-', label='Resource density') # 
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')


""" to create the consumer vs resource"""
f2 = p.figure()
p.plot(pops[:,0], pops[:,1] ,'r-' )# 
p.grid()
p.xlabel("Consumer density")
p.ylabel("Resource density")
p.title("Consumer-Resource population dynamics")

""" create two figures into a pdf and output"""
pp = PdfPages("../results/lv1.pdf")
pp.savefig(f1)
pp.savefig(f2)
pp.close()


**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 1.20992s

======================================================================
Inspecting script file LV2.py...

File contents are:

**********************************************************************
""" This module is set to model the LV model with resource population
    by ODE model"""
import numpy as np
import scipy.integrate as integrate
import matplotlib.pylab as p
from matplotlib.backends.backend_pdf import PdfPages
import sys

def dCR_dt(pops, t=0):
    """ the adjusted LV model with resource population"""
    R = pops[0]
    C = pops[1]
    dRdt = r * R*(1-R/K) - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return np.array([dRdt, dCdt])

""" parameter was set by testing people outside the script"""
r = float(sys.argv[1])
a = float(sys.argv[2])
z = float(sys.argv[3])
e = float(sys.argv[4])
K= 100

""" normal fixed time steps"""
t = np.linspace(0,300, 1000)

""" initlal setting for r and c"""
R0 = 10
C0 = 5 
RC0 = np.array([R0, C0])

""" ODE function """
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
pops


def main(argv):
    """ use def and main argv to include the global variables into the
        figure plotting"""
    f1 = p.figure()
    p.plot(t, pops[:,0], 'g-', label='Resource density') 
    p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
    p.grid()
    p.legend(loc='best')
    p.text(200,12, "r={}".format(argv[1]))   # use the .format(argv[])to grab outside variables into this area
    p.text(200,11, "a={}".format(argv[2]))
    p.text(200,10, "z={}".format(argv[3]))
    p.text(200,9, "e={}".format(argv[4]))
    p.text(200,8, "K = 100")
    p.xlabel('Time')
    p.ylabel('Population density')
    p.title('Consumer-Resource population dynamics')
    
    """ normal related figure"""
    f2 = p.figure()
    p.plot(pops[:,0], pops[:,1] ,'r-' )# 
    p.grid()
    p.xlabel("Consumer density")
    p.ylabel("Resource density")
    p.title("Consumer-Resource population dynamics")
    """ add two figures into one pdf """
    pp = PdfPages("../results/lv2.pdf")
    pp.savefig(f1)
    pp.savefig(f2)
    pp.close()


if (__name__ == "__main__"):
    """ setting for the local loop"""
    status = main(sys.argv)
    sys.exit(status)
    
#just in the pyhon evriment coed with: run LV2.py argv1 argv2 argv3 argv4
#argv recommanded as: 1 0.1 1.0 1.5
    
    
**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/JintaoLU_/week7/code/LV2.py", line 19, in <module>
    r = float(sys.argv[1])
IndexError: list index out of range

======================================================================
Inspecting script file Test.R...

File contents are:

**********************************************************************
print("hello , this is R")























**********************************************************************

Testing Test.R...

Output (only first 500 characters): 


**********************************************************************
[1] "hello , this is R"

**********************************************************************

Code ran without errors

Time consumed = 0.17821s

======================================================================
Inspecting script file profileme2.py...

File contents are:

**********************************************************************

#convert the loop to a list comprehension
def my_squares(iters):
    out = [i** 2 for i in range (iters)]
    return out

#replaced the .join with an explict string concatenation
def my_join(iters, string):
    out= ", "
    for i in range(iters):
        out += ", " + string
    return out

def run_myfuncs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0


run_myfuncs(10000000, "my string")

#run -p profileme2.py

#different functions about output the time
#run -p -s cumtime profileme2.py      ## allow sorting by certain column

#run without python bash
#python3 -m cProfile profileme2.py
#python3 -m cProfile -o profires myscript.py

















**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 89.5

Output (only first 500 characters): 


**********************************************************************
10000000 my string

**********************************************************************

Code ran without errors

Time consumed = 3.31833s

======================================================================
Inspecting script file fmr.R...

File contents are:

**********************************************************************
# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.

cat("Reading CSV\n")

nagy <- read.csv('../data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../results/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")

**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 


**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.24669s

======================================================================
Inspecting script file run_fmr_R.py...

File contents are:

**********************************************************************
""" use subprocess to realize applying R in python script"""
import subprocess
p = subprocess.Popen(["Rscript", "fmr.R"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = p.communicate()

""" print the result and check the pdf, to know that if the results were 
    run successfully."""
print(stdout.decode())

""" record the results"""
p = subprocess.Popen("Rscript --verbose fmr.R > ../results/fmr.Rout 2> ../results/fmr_errFile.Rout", shell=True).wait


**********************************************************************

Testing run_fmr_R.py...

run_fmr_R.py is a Python script file;

checking for docstrings...

Found too many docstrings.  Check your script.

Current Points = 89.5

Output (only first 500 characters): 


**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!


**********************************************************************

Code ran without errors

Time consumed = 0.50833s

======================================================================
Inspecting script file profileme.py...

File contents are:

**********************************************************************

def my_squares(iters):
    out=[]
    for i in range(iters):
        out.append(i **2)
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000, "my string")







**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 86.0

Output (only first 500 characters): 


**********************************************************************
10000000 my string

**********************************************************************

Code ran without errors

Time consumed = 4.77659s

======================================================================
Inspecting script file timeitme.py...

File contents are:

**********************************************************************
##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join



#%timeit my_squares_loops(iters)
#%timeit my_squares_lc(iters)
#%timeit (my_join_join(iters, mystring))
#%timeit (my_join(iters, mystring))

#another method to count the time
#import time
#start = time.time()
#my_squares_loops(iters)
#print(f"my_squares_loops takes {time.time() - start} s to run.")

#start = time.time()
#my_squares_lc(iters)
#print(f"my_squares_lc takes {time.time() - start} s to run.")




















**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 84.0

Output (only first 500 characters): 


**********************************************************************
10000000 my string
10000000 my string

**********************************************************************

Code ran without errors

Time consumed = 8.08493s

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 84.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!